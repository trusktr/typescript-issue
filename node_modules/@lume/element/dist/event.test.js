var __runInitializers = (this && this.__runInitializers) || function (thisArg, initializers, value) {
    var useValue = arguments.length > 2;
    for (var i = 0; i < initializers.length; i++) {
        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
    }
    return useValue ? value : void 0;
};
var __esDecorate = (this && this.__esDecorate) || function (ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
    function accept(f) { if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected"); return f; }
    var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
    var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
    var _, done = false;
    for (var i = decorators.length - 1; i >= 0; i--) {
        var context = {};
        for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
        for (var p in contextIn.access) context.access[p] = contextIn.access[p];
        context.addInitializer = function (f) { if (done) throw new TypeError("Cannot add initializers after decoration has completed"); extraInitializers.push(accept(f || null)); };
        var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
        if (kind === "accessor") {
            if (result === void 0) continue;
            if (result === null || typeof result !== "object") throw new TypeError("Object expected");
            if (_ = accept(result.get)) descriptor.get = _;
            if (_ = accept(result.set)) descriptor.set = _;
            if (_ = accept(result.init)) initializers.unshift(_);
        }
        else if (_ = accept(result)) {
            if (kind === "field") initializers.unshift(_);
            else descriptor[key] = _;
        }
    }
    if (target) Object.defineProperty(target, contextIn.name, descriptor);
    done = true;
};
import { element } from './element.js';
import { event } from './event.js';
import { Element } from './LumeElement.js';
describe('@event', () => {
    it('registers event listeners when assigned to event-named properties', () => {
        let testEvent = null;
        const ontestevent = (e) => (testEvent = e);
        let otherEvent = null;
        const onotherevent = (e) => (otherEvent = e);
        let anotherEvent = null;
        const onanother = (e) => (anotherEvent = e);
        let yetanotherEvent = null;
        const onyetanother = (e) => (yetanotherEvent = e);
        let onemoreEvent = null;
        const ononemore = (e) => (onemoreEvent = e);
        let lastoneEvent = null;
        const onlastone = (e) => (lastoneEvent = e);
        let LastOneForRealEvent = null;
        const onLastOneForReal = (e) => (LastOneForRealEvent = e);
        let lastOneForRealForRealEvent = null;
        const onLastOneForRealForReal = (e) => (lastOneForRealForRealEvent = e);
        // test builtin event props work the same
        let loadEvent = null;
        const onload = (e) => (loadEvent = e);
        let seriouslyTheLastOneEvent = null;
        const onSeriouslyTheLastOne = (e) => (seriouslyTheLastOneEvent = e);
        let okThisIsTheFinalOneEvent = null;
        const onokThisIsTheFinalOne = (e) => (okThisIsTheFinalOneEvent = e);
        let MyEl = (() => {
            let _classDecorators = [element('event-listeners')];
            let _classDescriptor;
            let _classExtraInitializers = [];
            let _classThis;
            let _classSuper = Element;
            let _instanceExtraInitializers = [];
            let _ontestevent_decorators;
            let _ontestevent_initializers = [];
            let _ontestevent_extraInitializers = [];
            let _onotherevent_decorators;
            let _onotherevent_initializers = [];
            let _onotherevent_extraInitializers = [];
            let _get_onanother_decorators;
            let _set_onanother_decorators;
            let _get_onyetanother_decorators;
            let _set_onyetanother_decorators;
            let _ononemore_decorators;
            let _ononemore_initializers = [];
            let _ononemore_extraInitializers = [];
            let _onlastone_decorators;
            let _onlastone_initializers = [];
            let _onlastone_extraInitializers = [];
            let _onLastOneForReal_decorators;
            let _onLastOneForReal_initializers = [];
            let _onLastOneForReal_extraInitializers = [];
            let _member_decorators;
            let _member_initializers = [];
            let _member_extraInitializers = [];
            var MyEl = class extends _classSuper {
                static { _classThis = this; }
                static {
                    const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
                    _ontestevent_decorators = [event];
                    _onotherevent_decorators = [event];
                    _get_onanother_decorators = [event];
                    _set_onanother_decorators = [event];
                    _get_onyetanother_decorators = [event];
                    _set_onyetanother_decorators = [event];
                    _ononemore_decorators = [event];
                    _onlastone_decorators = [event];
                    _onLastOneForReal_decorators = [event];
                    _member_decorators = [event];
                    __esDecorate(this, null, _ontestevent_decorators, { kind: "accessor", name: "ontestevent", static: false, private: false, access: { has: obj => "ontestevent" in obj, get: obj => obj.ontestevent, set: (obj, value) => { obj.ontestevent = value; } }, metadata: _metadata }, _ontestevent_initializers, _ontestevent_extraInitializers);
                    __esDecorate(this, null, _onotherevent_decorators, { kind: "accessor", name: "onotherevent", static: false, private: false, access: { has: obj => "onotherevent" in obj, get: obj => obj.onotherevent, set: (obj, value) => { obj.onotherevent = value; } }, metadata: _metadata }, _onotherevent_initializers, _onotherevent_extraInitializers);
                    __esDecorate(this, null, _get_onanother_decorators, { kind: "getter", name: "onanother", static: false, private: false, access: { has: obj => "onanother" in obj, get: obj => obj.onanother }, metadata: _metadata }, null, _instanceExtraInitializers);
                    __esDecorate(this, null, _set_onanother_decorators, { kind: "setter", name: "onanother", static: false, private: false, access: { has: obj => "onanother" in obj, set: (obj, value) => { obj.onanother = value; } }, metadata: _metadata }, null, _instanceExtraInitializers);
                    __esDecorate(this, null, _get_onyetanother_decorators, { kind: "getter", name: "onyetanother", static: false, private: false, access: { has: obj => "onyetanother" in obj, get: obj => obj.onyetanother }, metadata: _metadata }, null, _instanceExtraInitializers);
                    __esDecorate(this, null, _set_onyetanother_decorators, { kind: "setter", name: "onyetanother", static: false, private: false, access: { has: obj => "onyetanother" in obj, set: (obj, value) => { obj.onyetanother = value; } }, metadata: _metadata }, null, _instanceExtraInitializers);
                    __esDecorate(null, null, _ononemore_decorators, { kind: "field", name: "ononemore", static: false, private: false, access: { has: obj => "ononemore" in obj, get: obj => obj.ononemore, set: (obj, value) => { obj.ononemore = value; } }, metadata: _metadata }, _ononemore_initializers, _ononemore_extraInitializers);
                    __esDecorate(null, null, _onlastone_decorators, { kind: "field", name: "onlastone", static: false, private: false, access: { has: obj => "onlastone" in obj, get: obj => obj.onlastone, set: (obj, value) => { obj.onlastone = value; } }, metadata: _metadata }, _onlastone_initializers, _onlastone_extraInitializers);
                    __esDecorate(null, null, _onLastOneForReal_decorators, { kind: "field", name: "onLastOneForReal", static: false, private: false, access: { has: obj => "onLastOneForReal" in obj, get: obj => obj.onLastOneForReal, set: (obj, value) => { obj.onLastOneForReal = value; } }, metadata: _metadata }, _onLastOneForReal_initializers, _onLastOneForReal_extraInitializers);
                    __esDecorate(null, null, _member_decorators, { kind: "field", name: 'onlast-one-for-real-for-real', static: false, private: false, access: { has: obj => 'onlast-one-for-real-for-real' in obj, get: obj => obj['onlast-one-for-real-for-real'], set: (obj, value) => { obj['onlast-one-for-real-for-real'] = value; } }, metadata: _metadata }, _member_initializers, _member_extraInitializers);
                    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
                    MyEl = _classThis = _classDescriptor.value;
                    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
                }
                #ontestevent_accessor_storage = (__runInitializers(this, _instanceExtraInitializers), __runInitializers(this, _ontestevent_initializers, ontestevent));
                get ontestevent() { return this.#ontestevent_accessor_storage; }
                set ontestevent(value) { this.#ontestevent_accessor_storage = value; }
                #onotherevent_accessor_storage = (__runInitializers(this, _ontestevent_extraInitializers), __runInitializers(this, _onotherevent_initializers, null));
                get onotherevent() { return this.#onotherevent_accessor_storage; }
                set onotherevent(value) { this.#onotherevent_accessor_storage = value; }
                #onanother = (__runInitializers(this, _onotherevent_extraInitializers), onanother);
                get onanother() {
                    return this.#onanother;
                }
                set onanother(v) {
                    this.#onanother = v;
                }
                #onyetanother = null;
                get onyetanother() {
                    return this.#onyetanother;
                }
                set onyetanother(v) {
                    this.#onyetanother = v;
                }
                ononemore = __runInitializers(this, _ononemore_initializers, ononemore);
                onlastone = (__runInitializers(this, _ononemore_extraInitializers), __runInitializers(this, _onlastone_initializers, null));
                onLastOneForReal = (__runInitializers(this, _onlastone_extraInitializers), __runInitializers(this, _onLastOneForReal_initializers, null));
                'onlast-one-for-real-for-real' = (__runInitializers(this, _onLastOneForReal_extraInitializers), __runInitializers(this, _member_initializers, null
                // onload = null // this is a builtin event prop
                // Test non-decorator usage
                ));
                // onload = null // this is a builtin event prop
                // Test non-decorator usage
                static events = ['seriously-the-last-one', 'okThisIsTheFinalOne'];
                'onseriously-the-last-one' = (__runInitializers(this, _member_extraInitializers), null);
                connectedCallback() {
                    super.connectedCallback();
                    this.dispatchEvent(new Event('testevent'));
                    this.dispatchEvent(new Event('otherevent'));
                    this.dispatchEvent(new Event('another'));
                    this.dispatchEvent(new Event('yetanother'));
                    this.dispatchEvent(new Event('onemore'));
                    this.dispatchEvent(new Event('lastone'));
                    this.dispatchEvent(new Event('LastOneForReal'));
                    this.dispatchEvent(new Event('last-one-for-real-for-real'));
                    this.dispatchEvent(new Event('load'));
                    this.dispatchEvent(new Event('seriously-the-last-one'));
                    this.dispatchEvent(new Event('okThisIsTheFinalOne'));
                }
                static {
                    __runInitializers(_classThis, _classExtraInitializers);
                }
            };
            return MyEl = _classThis;
        })();
        const el = new MyEl();
        el.onotherevent = onotherevent;
        el.onyetanother = onyetanother;
        el.onlastone = onlastone;
        el.onLastOneForReal = onLastOneForReal;
        el['onlast-one-for-real-for-real'] = onLastOneForRealForReal;
        el.onload = onload;
        el['onseriously-the-last-one'] = onSeriouslyTheLastOne;
        el.onokThisIsTheFinalOne = onokThisIsTheFinalOne;
        document.body.append(el);
        expect(testEvent).toBeInstanceOf(Event);
        expect(otherEvent).toBeInstanceOf(Event);
        expect(String(anotherEvent)).toBe('null');
        expect(yetanotherEvent).toBeInstanceOf(Event);
        expect(onemoreEvent).toBeInstanceOf(Event);
        expect(lastoneEvent).toBeInstanceOf(Event);
        expect(LastOneForRealEvent).toBeInstanceOf(Event);
        expect(lastOneForRealForRealEvent).toBeInstanceOf(Event);
        expect(loadEvent).toBeInstanceOf(Event);
        expect(seriouslyTheLastOneEvent).toBeInstanceOf(Event);
        expect(okThisIsTheFinalOneEvent).toBeInstanceOf(Event);
        testEvent = null;
        otherEvent = null;
        anotherEvent = null;
        yetanotherEvent = null;
        onemoreEvent = null;
        lastoneEvent = null;
        LastOneForRealEvent = null;
        lastOneForRealForRealEvent = null;
        loadEvent = null;
        seriouslyTheLastOneEvent = null;
        okThisIsTheFinalOneEvent = null;
        el.dispatchEvent(new Event('testevent'));
        el.dispatchEvent(new Event('otherevent'));
        el.dispatchEvent(new Event('another'));
        el.dispatchEvent(new Event('yetanother'));
        el.dispatchEvent(new Event('onemore'));
        el.dispatchEvent(new Event('lastone'));
        el.dispatchEvent(new Event('LastOneForReal'));
        el.dispatchEvent(new Event('last-one-for-real-for-real'));
        el.dispatchEvent(new Event('load'));
        el.dispatchEvent(new Event('seriously-the-last-one'));
        el.dispatchEvent(new Event('okThisIsTheFinalOne'));
        expect(testEvent).toBeInstanceOf(Event);
        expect(otherEvent).toBeInstanceOf(Event);
        expect(String(anotherEvent)).toBe('null');
        expect(yetanotherEvent).toBeInstanceOf(Event);
        expect(onemoreEvent).toBeInstanceOf(Event);
        expect(lastoneEvent).toBeInstanceOf(Event);
        expect(LastOneForRealEvent).toBeInstanceOf(Event);
        expect(lastOneForRealForRealEvent).toBeInstanceOf(Event);
        expect(loadEvent).toBeInstanceOf(Event);
        expect(seriouslyTheLastOneEvent).toBeInstanceOf(Event);
        expect(okThisIsTheFinalOneEvent).toBeInstanceOf(Event);
        testEvent = null;
        otherEvent = null;
        anotherEvent = null;
        yetanotherEvent = null;
        onemoreEvent = null;
        lastoneEvent = null;
        LastOneForRealEvent = null;
        lastOneForRealForRealEvent = null;
        loadEvent = null;
        seriouslyTheLastOneEvent = null;
        okThisIsTheFinalOneEvent = null;
        let testEvent2 = null;
        const ontestevent2 = (e) => (testEvent2 = e);
        el.ontestevent = ontestevent2;
        let otherEvent2 = null;
        const onotherevent2 = (e) => (otherEvent2 = e);
        el.onotherevent = onotherevent2;
        let anotherEvent2 = null;
        const onanother2 = (e) => (anotherEvent2 = e);
        el.onanother = onanother2;
        let yetanotherEvent2 = null;
        const onyetanother2 = (e) => (yetanotherEvent2 = e);
        el.onyetanother = onyetanother2;
        let onemoreEvent2 = null;
        const ononemore2 = (e) => (onemoreEvent2 = e);
        el.ononemore = ononemore2;
        let lastoneEvent2 = null;
        const onlastone2 = (e) => (lastoneEvent2 = e);
        el.onlastone = onlastone2;
        let LastOneForRealEvent2 = null;
        const onLastOneForReal2 = (e) => (LastOneForRealEvent2 = e);
        el.onLastOneForReal = onLastOneForReal2;
        let lastOneForRealForRealEvent2 = null;
        const onLastOneForRealForReal2 = (e) => (lastOneForRealForRealEvent2 = e);
        el['onlast-one-for-real-for-real'] = onLastOneForRealForReal2;
        let loadEvent2 = null;
        const onload2 = (e) => (loadEvent2 = e);
        el.onload = onload2;
        let seriouslyTheLastOneEvent2 = null;
        const onSeriouslyTheLastOne2 = (e) => (seriouslyTheLastOneEvent2 = e);
        el['onseriously-the-last-one'] = onSeriouslyTheLastOne2;
        let okThisIsTheFinalOneEvent2 = null;
        const onokThisIsTheFinalOne2 = (e) => (okThisIsTheFinalOneEvent2 = e);
        el.onokThisIsTheFinalOne = onokThisIsTheFinalOne2;
        el.dispatchEvent(new Event('testevent'));
        el.dispatchEvent(new Event('otherevent'));
        el.dispatchEvent(new Event('another'));
        el.dispatchEvent(new Event('yetanother'));
        el.dispatchEvent(new Event('onemore'));
        el.dispatchEvent(new Event('lastone'));
        el.dispatchEvent(new Event('LastOneForReal'));
        el.dispatchEvent(new Event('last-one-for-real-for-real'));
        el.dispatchEvent(new Event('load'));
        el.dispatchEvent(new Event('seriously-the-last-one'));
        el.dispatchEvent(new Event('okThisIsTheFinalOne'));
        expect(String(testEvent)).toBe('null');
        expect(String(otherEvent)).toBe('null');
        expect(String(anotherEvent)).toBe('null');
        expect(String(yetanotherEvent)).toBe('null');
        expect(String(onemoreEvent)).toBe('null');
        expect(String(lastoneEvent)).toBe('null');
        expect(String(LastOneForRealEvent)).toBe('null');
        expect(String(lastOneForRealForRealEvent)).toBe('null');
        expect(String(loadEvent)).toBe('null');
        expect(String(seriouslyTheLastOneEvent)).toBe('null');
        expect(String(okThisIsTheFinalOneEvent)).toBe('null');
        expect(testEvent2).toBeInstanceOf(Event);
        expect(otherEvent2).toBeInstanceOf(Event);
        expect(anotherEvent2).toBeInstanceOf(Event);
        expect(yetanotherEvent2).toBeInstanceOf(Event);
        expect(onemoreEvent2).toBeInstanceOf(Event);
        expect(lastoneEvent2).toBeInstanceOf(Event);
        expect(LastOneForRealEvent2).toBeInstanceOf(Event);
        expect(lastOneForRealForRealEvent2).toBeInstanceOf(Event);
        expect(loadEvent2).toBeInstanceOf(Event);
        expect(seriouslyTheLastOneEvent2).toBeInstanceOf(Event);
        expect(okThisIsTheFinalOneEvent2).toBeInstanceOf(Event);
    });
});
//# sourceMappingURL=event.test.js.map