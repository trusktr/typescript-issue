import type {DashCasedProps} from '@lume/element'
import type {
	AddDelimitersToEventKeys,
	AsBooleanStringValues,
	AsBooleanValues,
	AsNumberStringValues,
	AsStringValues,
	AsValues,
	BooleanProps,
	EventProps,
	FunctionsOnly,
	NonBooleanProps,
	NonEventProps,
	NonFunctionsOnly,
	NonNumberProps,
	NonOnProps,
	NumberProps,
	PrefixProps,
	RemapSetters,
	RemoveAccessors,
	RemoveSetterPrefixes,
	SetterTypePrefix,
	WithBooleanStringValues,
	WithNumberStringValues,
	WithStringValues,
} from './LumeElement'
import type {JSX} from 'pota/jsx'

// prettier-ignore
export type PotaElementAttributes<
	El,
	SelectedProperties extends keyof RemoveSetterPrefixes<RemoveAccessors<El>, SetterTypePrefix>,
	AdditionalProperties extends object = {},
> =
	// Any props inherited from HTMLElement except for any that we will override from the custom element subclass or AdditionalProperties
	& Omit<
		JSX.HTMLAttributes<El, {}, JSX.HTMLEvents<El>>,
		SelectedProperties | keyof AdditionalProperties // | 'onerror'
	>
	// CONTINUE confirm this is not needed for Pota
	// // Fixes the onerror JSX prop type (https://github.com/microsoft/TypeScript-DOM-lib-generator/issues/1821)
	// & { onerror?: ((error: ErrorEvent) => void) | null }

	// All non-'on' non-boolean properties
	& Partial< DashCasedProps< WithStringValues< NonNumberProps< NonBooleanProps< NonOnProps<El, SelectedProperties> > > > > >

	// All 'on' properties that are not functions, they will always error when not prefixed with prop: or attr:
	& Partial<AsValues<NonFunctionsOnly<EventProps<El, SelectedProperties>>, never>>

	// All non-event properties that are not boolean, prefixed with prop:
	& Partial< PrefixProps<'prop:', WithStringValues< NonNumberProps< NonBooleanProps< NonEventProps<El, SelectedProperties> > > > > >

	// All non-event properties that are not boolean, prefixed with attr:
	& Partial< PrefixProps<'attr:', DashCasedProps< AsStringValues< NonNumberProps< NonBooleanProps< NonEventProps<El, SelectedProperties> > > > > > >

	// Boolean attributes
	& Partial<
		DashCasedProps< WithBooleanStringValues< BooleanProps< Pick<RemapSetters<El>, SelectedProperties> > > >
		& PrefixProps<'bool:', DashCasedProps< AsBooleanValues< BooleanProps< Pick<RemapSetters<El>, SelectedProperties> > > > >
		& PrefixProps<'prop:', WithBooleanStringValues< BooleanProps< Pick<RemapSetters<El>, SelectedProperties> > > >
		& PrefixProps<'attr:', DashCasedProps< AsBooleanStringValues< BooleanProps< Pick<RemapSetters<El>, SelectedProperties> > > > >
	>

	// Number attributes
	& Partial<
		DashCasedProps< WithNumberStringValues< NumberProps< Pick<RemapSetters<El>, SelectedProperties> > > >
		& PrefixProps<'prop:', WithNumberStringValues< NumberProps< Pick<RemapSetters<El>, SelectedProperties> > > >
		& PrefixProps<'attr:', DashCasedProps< AsNumberStringValues< NumberProps< Pick<RemapSetters<El>, SelectedProperties> > > > >
	>

	// Pick the `on*` event handler types from the element type, without string values (only functions)
	// & Partial<FunctionsOnly<EventProps<El, SelectedProperties>>> // Solid only, not Pota
	// Also map `on*` event handler types to `on:*` prop types for JSX
	& Partial<AddDelimitersToEventKeys<FunctionsOnly<EventProps<El, SelectedProperties>>>>

	& AdditionalProperties

// type t = JSX.HTMLAttributes<HTMLElement, {}, JSX.HTMLEvents<HTMLElement>>
// type t2 = t['on:error']

// type ElementClass = HTMLElement & {
// 	num: number
// 	str: 'foo' | 'bar'
// 	bool: boolean
// 	onfoo: ((ev: Event) => void) | null
// }

// type props = PotaElementAttributes<ElementClass, 'num' | 'str' | 'bool' | 'onfoo'>

// // All of them are unioned with `| undefined`
// type test = [
// 	props['num'], // number | `${number}`
// 	props['attr:num'], // `${number}`
// 	props['prop:num'], // number | `${number}`
// 	props['bool:num'], // doesn't exist (type error)
// 	props['on:num'], // doesn't exist (type error)

// 	props['bool'], // boolean | 'true' | 'false'
// 	props['attr:bool'], // 'true' | 'false'
// 	props['prop:bool'], // boolean | 'true' | 'false'
// 	props['bool:bool'], // boolean
// 	props['on:bool'], // doesn't exist (type error)

// 	props['str'], // 'foo' | 'bar'
// 	props['attr:str'], // 'foo' | 'bar'
// 	props['prop:str'], // 'foo' | 'bar'
// 	props['bool:str'], // doesn't exist (type error)
// 	props['on:str'], // doesn't exist (type error)

// 	props['onfoo'], // ((ev: Event) => void) | null (but I need to remove this for pota)
// 	props['attr:onfoo'], // doesn't exist (type error)
// 	props['prop:onfoo'], // doesn't exist (type error)
// 	props['bool:onfoo'], // doesn't exist (type error)
// 	props['on:onfoo'], // doesn't exist (type error)
// 	props['on:foo'], // ((ev: Event) => void) | null
// ]
