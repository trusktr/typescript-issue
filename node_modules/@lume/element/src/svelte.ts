import type {HTMLAttributes} from 'svelte/elements'
import type {
	RemoveSetterPrefixes,
	RemoveAccessors,
	SetterTypePrefix,
	WithStringValues,
	NonNumberProps,
	NonBooleanProps,
	NonEventProps,
	FunctionsOnly,
	EventProps,
	WithBooleanStringValues,
	BooleanProps,
	WithNumberStringValues,
	NumberProps,
} from './LumeElement'

// CONTINUE:
// - install svelte dev dep
// - import helper in svelte example
// - make a pota example
// - finalize TODOs in all framework examples
// - ensure peerDependencies (or optionalDependencies?) are correct
// - add `jsx-types-svelte.test.ts`, etc, tests for each framework

// prettier-ignore
/**
 * Use this to define the attributes of a custom element that should be exposed in Svelte templates for type checking.
 */
export type SvelteElementAttributes<
	/**
	 * The element type (pass in the class of your custom element).
	 */
	El extends EventTarget,

	/**
	 * The properties of the custom element that should be exposed as attributes in Svelte templates.
	 */
	SelectedProperties extends keyof RemoveSetterPrefixes<RemoveAccessors<El>, SetterTypePrefix>,

	/**
	 * Additional properties that should be exposed as attributes in Svelte templates.
	 */
	AdditionalProperties extends object = {}
> =
	& Omit<
		HTMLAttributes<El>,
		SelectedProperties | keyof AdditionalProperties
	>

	& {
		/** The 'has' attribute from the 'element-behaviors' package. If `element-behaviors` is installed and imported (it is if you're using `lume` 3D elements) then this specifies which behaviors to instantiate on the given element. */
		has?: string
	}

	& Partial<WithStringValues<NonNumberProps<NonBooleanProps<NonEventProps<El, SelectedProperties>>>>>

	// Pick the `onfoo` event handler types from the element type, without string values
	& Partial<FunctionsOnly<EventProps<El, SelectedProperties>>>

	& Partial<WithBooleanStringValues<BooleanProps<NonEventProps<El, SelectedProperties>>>>

	& Partial<WithNumberStringValues<NumberProps<NonEventProps<El, SelectedProperties>>>>

	& AdditionalProperties
