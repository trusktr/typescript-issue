import type {EmitFn, HTMLAttributes, PublicProps} from 'vue'
import type {
	BooleanProps,
	EventProps,
	FunctionsOnly,
	NonBooleanProps,
	NonEventProps,
	NonNumberProps,
	NumberProps,
	OmitFromUnion,
	RemoveAccessors,
	RemoveSetterPrefixes,
	SetterTypePrefix,
	WithBooleanStringValues,
	WithNumberStringValues,
	WithStringValues,
} from './LumeElement.js'

// prettier-ignore
export type VueElementAttributes<
	El,
	SelectedAttributes extends keyof RemoveSetterPrefixes<RemoveAccessors<El>, SetterTypePrefix>,
	AdditionalProperties extends object = {},
> = new () => El & {
	/**
	 * @deprecated Do not use the $props property on a Custom Element ref, this
	 * is for template prop types only.
	 */
	$props: Omit<HTMLAttributes & PublicProps, SelectedAttributes | keyof AdditionalProperties>

		& Partial<WithStringValues<NonNumberProps<NonBooleanProps<NonEventProps<El, SelectedAttributes>>>>>

		& Partial<WithBooleanStringValues<BooleanProps<NonEventProps<El, SelectedAttributes>>>>

		& Partial<WithNumberStringValues<NumberProps<NonEventProps<El, SelectedAttributes>>>>

		& AdditionalProperties

	/**
	 * @deprecated Do not use the $emit property on a Custom Element ref, this
	 * is for template prop types only.
	 */
	$emit: EmitFn<FunctionsOnly<RemoveOnPrefixes<NonNullValues<EventProps<El, SelectedAttributes>>>>>
}

type RemoveOnPrefixes<T> = {
	[K in keyof T as K extends `on${infer EventName}` ? EventName : never]: T[K]
}

type NonNullValues<T> = {
	[K in keyof T]: OmitFromUnion<T[K], null>
}
