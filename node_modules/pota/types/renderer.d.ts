/**
 * Creates components for things. When props argument is given, the
 * props become fixed. When props argument is ommited, it allows you
 * to keep calling the returned function with new props. Returns a
 * function because we need to render from parent to children instead
 * of from children to parent. This allows to properly set the
 * reactivity tree (think of nested effects that clear inner effects,
 * context, etc).
 *
 * @param {string | Function | Element | object | symbol} value -
 *   Component
 * @param {any} [props] Object
 * @returns {Children}
 * @url https://pota.quack.uy/Component
 */
export function Component(value: string | Function | Element | object | symbol, props?: any): Children;
export function createComponent(value: any): (props: any) => () => any;
/**
 * @param {string} content
 * @param {{
 * 	x?: string
 * 	i?: boolean
 * 	m?: number
 * }} propsData
 */
export function createPartial(content: string, propsData?: {
    x?: string;
    i?: boolean;
    m?: number;
}): (props: any) => () => any;
/**
 * WARNINGS Removal of the element on where you render/insert into,
 * wont cause disposal of what you render/insert.
 */
/**
 * Inserts children into a parent
 *
 * @param {any} children - Thing to render
 * @param {Element} [parent] - Mount point, defaults to document.body
 * @param {{ clear?: boolean; relative?: boolean }} [options] -
 *   Mounting options
 * @returns {() => void} Disposer
 * @url https://pota.quack.uy/render
 */
export function render(children: any, parent?: Element, options?: {
    clear?: boolean;
    relative?: boolean;
}): () => void;
/**
 * @param {any} children - Thing to render
 * @param {Element} [parent] - Mount point, defaults to
 *   `document.body`
 * @param {{ clear?: boolean; relative?: boolean }} [options] -
 *   Mounting options
 */
export function insert(children: any, parent?: Element, options?: {
    clear?: boolean;
    relative?: boolean;
}): any;
/**
 * Creates and returns a DocumentFragment for `children`
 *
 * @param {Children} children
 * @returns {DocumentFragment}
 * @url https://pota.quack.uy/toHTML
 */
export function toHTMLFragment(children: Children): DocumentFragment;
/**
 * Creates a context and returns a function to get or set the value
 *
 * @param {any} [defaultValue] - Default value for the context
 * @returns {Function & { Provider: ({ value }) => Children }}
 *   Context
 * @url https://pota.quack.uy/Reactivity/Context
 */
export function context(defaultValue?: any): Function & {
    Provider: ({ value }: any) => Children;
};
export function Fragment(props: any): any;
export function toHTML(children: Children): Children;
//# sourceMappingURL=renderer.d.ts.map