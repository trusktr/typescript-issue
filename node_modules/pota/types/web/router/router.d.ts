/**
 * Renders children if the path matches the current location
 *
 * @template T
 * @param {object} props
 * @param {string} [props.path] - Path to match relative to the parent
 *   Route. When `path` is missing, it will render only when the
 *   parent's route path is matched exactly.
 * @param {string[]} [props.scroll] - Elements to scroll when the
 *   route matches
 * @param {object} [props.params] - Key-value pairs params to encode
 *   and replace on the path
 * @param {When<T>} [props.collapse] - To hide the route instead of
 *   removing it from the document
 * @param {When<T>} [props.when] - To stop rendering the route even if
 *   the path matches.
 * @param {Children} [props.fallback] - Fallback for when a `when`
 *   condition is set. If the `when` condition is not set, this wont
 *   be used.
 * @param {Children} [props.children]
 * @returns {Children}
 * @url https://pota.quack.uy/Components/Router/Router
 */
export function Router<T>(props: {
    path?: string | undefined;
    scroll?: string[] | undefined;
    params?: object | undefined;
    collapse?: When<T> | undefined;
    when?: When<T> | undefined;
    fallback?: Children;
    children?: Children;
}): Children;
export namespace Router {
    /**
     * Renders children when no sibling `Router` matches
     *
     * @param {object} props
     * @param {Children} [props.children]
     * @returns {Children}
     */
    function Default(props: {
        children?: Children;
    }): Children;
}
//# sourceMappingURL=router.d.ts.map