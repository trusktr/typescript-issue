/**
 * Returns the signal tracking the value.
 *
 * @template T
 * @param {T} target
 * @param {Track} track
 * @param {PropertyKey} key
 * @returns {[(newValue) => any, (newValue) => boolean]}
 */
export function trackerValueSignal<T>(target: T, track: Track, key: PropertyKey): [(newValue: any) => any, (newValue: any) => boolean];
/** @type symbol */
export const $track: symbol;
/** @type symbol */
export const $trackSlot: symbol;
export function tracker<T>(target: T): Track;
export class Track {
    /**
     * @param {object} value
     * @param {boolean} [isNew]
     */
    constructor(value: object, isNew?: boolean);
    /**
     * Keeps track of: a value for a `key`
     *
     * @param {PropertyKey} key
     * @param {any} value
     * @returns {any} Value
     */
    valueRead(key: PropertyKey, value: any): any;
    /**
     * Keeps track of: a value for a `key`
     *
     * @param {PropertyKey} key
     * @param {any} value
     * @returns {boolean} Indicating if the value changed
     */
    valueWrite(key: PropertyKey, value: any): boolean;
    /**
     * Keeps track of: if a `key` is in an object.
     *
     * @param {PropertyKey} key
     * @param {boolean} value - Indicating if the property is `in`
     */
    hasRead(key: PropertyKey, value: boolean): void;
    /**
     * Keeps track of: if a `key` is in an object.
     *
     * @param {PropertyKey} key
     * @param {boolean} value - Indicating if the property is `in`
     */
    hasWrite(key: PropertyKey, value: boolean): void;
    /**
     * Keeps track of: if value is undefined, regardless if the `key`
     * exists in the object or not.
     *
     * @param {PropertyKey} key
     * @param {boolean} value - Indicating if the property is
     *   `undefined`
     */
    isUndefinedRead(key: PropertyKey, value: boolean): void;
    /**
     * Keeps track of: if value is undefined, regardless if the `key`
     * exists in the object or not.
     *
     * @param {PropertyKey} key
     * @param {boolean} value - Indicating if the property is
     *   `undefined`
     */
    isUndefinedWrite(key: PropertyKey, value: boolean): void;
    /**
     * Adds a key.
     *
     * 1. Sets `has` state to `true`
     * 2. Sets `undefined` state
     * 3. Sets `value`
     *
     * @param {PropertyKey} key
     * @param {any} value
     */
    add(key: PropertyKey, value: any): void;
    /**
     * Modifies a key.
     *
     * 1. Sets `value`
     * 2. Sets `undefined` state
     *
     * @param {PropertyKey} key
     * @param {any} value
     */
    modify(key: PropertyKey, value: any): boolean;
    /**
     * Deletes a key.
     *
     * 1. Sets `has` state to `false`
     * 2. Sets `undefined` state to true
     * 3. Sets `value` to `undefined`
     *
     * @param {PropertyKey} key
     */
    delete(key: PropertyKey): void;
    /** For using exclusively with Symbols by reusing the "Value" slot */
    /**
     * To indicate all values have been read
     *
     * @param {symbol} [key]
     */
    read(key?: symbol): void;
    /**
     * To indicate all values have changed *
     *
     * @param {symbol} [key]
     */
    write(key?: symbol): void;
    /** `ownKeys` read */
    ownKeysRead(): void;
    /** To indicate keys have change */
    ownKeysWrite(): void;
    #private;
}
//# sourceMappingURL=tracker.d.ts.map