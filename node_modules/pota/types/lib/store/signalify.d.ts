/**
 * Transforms in place properties of an object into signals via
 * get/set. Is not recursive. Works with inherited getters/setters. It
 * doesn't track functions.
 *
 * @template T
 * @param {T} target
 * @param {PropertyKey[]} [keys] - To transform specific keys. It is
 *   possible to signalify keys that don't exists yet.
 * @returns {T}
 */
export function signalify<T>(target: T, keys?: PropertyKey[]): T;
/**
 * Signalify object properties
 *
 * @template T
 * @param {T} target
 * @param {Function} [wrapper] To wrap values
 */
export function signalifyObject<T>(target: T, wrapper?: Function): void;
/**
 * Signalify specific object properties
 *
 * @template T
 * @param {T} target
 * @param {PropertyKey[]} keys - To transform specific keys. It is
 *   possible to signalify keys that don't exists yet.
 * @param {Function} [wrapper] To wrap values
 */
export function signalifyKeys<T>(target: T, keys: PropertyKey[], wrapper?: Function): void;
/**
 * Signalify an undefined property
 *
 * @template T
 * @param {T} target
 * @param {PropertyKey} key
 * @param {Function} [wrapper] To wrap values
 * @param {any} [track] Tracker
 * @param {any} [value] Default value
 */
export function signalifyUndefinedKey<T>(target: T, key: PropertyKey, wrapper?: Function, track?: any, value?: any): void;
//# sourceMappingURL=signalify.d.ts.map