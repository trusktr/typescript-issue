/**
 * Navigates to a new location from JSX
 *
 * @param {{
 * 	href: string
 * 	scroll?: boolean
 * 	replace?: boolean
 * 	params?: object
 * 	delay?: number
 * }} props
 * @url https://pota.quack.uy/Components/Router/Navigate
 */
export function Navigate(props: {
    href: string;
    scroll?: boolean;
    replace?: boolean;
    params?: object;
    delay?: number;
}): any;
export function addListeners(): void;
export type location = {
    /**
     * - The full url
     */
    href: Signal;
    /**
     * - Mirror of window.location.pathname
     */
    pathname: Signal;
    /**
     * - Everything after #
     */
    hash: Signal;
    /**
     * - Pathname + hash
     */
    path: Signal;
    /**
     * - Key value pairs with search params
     */
    query: Signal;
    /**
     * - Key value pairs with route params
     */
    params: Function;
};
/**
 * @typedef {object} location
 * @property {Signal} href - The full url
 * @property {Signal} pathname - Mirror of window.location.pathname
 * @property {Signal} hash - Everything after #
 * @property {Signal} path - Pathname + hash
 * @property {Signal} query - Key value pairs with search params
 * @property {Function} params - Key value pairs with route params
 */
/** @type location */
export const location: location;
export function useBeforeLeave(callback: Function | Promise<unknown>): void;
export { navigateUser as navigate };
/**
 * Navigates to a new location programmatically
 *
 * @param {string} href
 * @param {{
 * 	params?: object
 * 	scroll?: boolean
 * 	replace?: boolean
 * 	delay?: number
 * }} options
 * @url https://pota.quack.uy/Components/Router/Navigate
 */
declare function navigateUser(href: string, options?: {
    params?: object;
    scroll?: boolean;
    replace?: boolean;
    delay?: number;
}): void;
//# sourceMappingURL=useLocation.d.ts.map